name: Install PHP
inputs:
  version:
    required: true
  type:
    required: true
  zts:
    required: true
outputs:
  version:
    value: ${{ steps.determine-php-version.outputs.version }}
runs:
  using: composite
  steps:
    - name: apt update
      shell: bash
      run: sudo apt-get update

    - name: Install runtime libraries
      shell: bash
      run: |
        sudo apt-get install -y \
          '?and(?name(^libicu[0-9]+$),?source-package(icu))' \
          libmcrypt4 \
          libmemcached11 \
          librabbitmq4 \
          librdkafka1 \
          '?name(^libzip[0-9]+$)'

    - name: Determine PHP version
      id: determine-php-version
      shell: bash
      run: |
        set -ex
        if ! command -v jq > /dev/null; then
          sudo apt-get install -y jq
        fi
        if [[ "${{ inputs.version }}" = *-dev ]]; then
          curl -fsSL "https://www.php.net/release-candidates.php?format=json" -o version.json
          version="$(cat version.json |jq -r --arg version "${{ inputs.version }}" '.releases[] |select(.version |startswith($version |sub("-dev"; "."))).version')"
          archive="$(cat version.json |jq -r --arg version "${{ inputs.version }}" '.releases[] |select(.version |startswith($version |sub("-dev"; "."))).files.gz.path')"
        else
          curl -fsSL "https://www.php.net/releases/index.php?json&max=1&version=${{ inputs.version }}" -o version.json
          version="$(cat version.json |jq -r 'keys[0]')"
          archive="$(cat version.json |jq -r '.[] .source[] |select(.filename |endswith(".gz")) |"https://www.php.net/distributions/" + .filename')"
        fi

        printf "version=%s\n" "$version" >> $GITHUB_OUTPUT
        printf "archive=%s\n" "$archive" >> $GITHUB_OUTPUT

    - name: Determine Ubuntu version
      id: determine-ubuntu-version
      shell: bash
      run: |
        set -ex
        # No quotes around the subshell, because we want word-splitting.
        printf "version=%s-%s\n" $(lsb_release --short --release --id 2>/dev/null) >> $GITHUB_OUTPUT

    - name: Download OpenSSL 1.1 packages
      shell: bash
      run: |
        if dpkg --compare-versions "${{ steps.determine-php-version.outputs.version }}" lt 8.1.0; then
          curl -fL --max-time 30 -O http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.24_amd64.deb
          curl -fL --max-time 30 -O http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl-dev_1.1.1f-1ubuntu2.24_amd64.deb
          curl -fL --max-time 30 -O https://ports.ubuntu.com/ubuntu-ports/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.24_arm64.deb
          curl -fL --max-time 30 -O https://ports.ubuntu.com/ubuntu-ports/pool/main/o/openssl/libssl-dev_1.1.1f-1ubuntu2.24_arm64.deb

          # Indentation is intentionally off due to the heredoc syntax.
          sha256sum --check --ignore-missing << "EOF"
        33e1678adfea3847e0bbcbb26a643fd0dad38874c9e00def0d4d61dbc589083c *libssl-dev_1.1.1f-1ubuntu2.24_amd64.deb
        a664d282a0b19fb687c1b9f5a06abcf879bc5643c6e8be435f13c187d13a5b6a *libssl-dev_1.1.1f-1ubuntu2.24_arm64.deb
        7cf39d70a639017d1dd7c8d36daa2258063608688e449fddf40ffdd46f992a78 *libssl1.1_1.1.1f-1ubuntu2.24_amd64.deb
        dded4572af8b0a9e0310909f211a519cc6409fda31ea81132a77e268b0ec0f2f *libssl1.1_1.1.1f-1ubuntu2.24_arm64.deb
        EOF

          case "${{ runner.arch}}" in
            "X64")
              sudo apt-get install -y ./libssl1.1_1.1.1f-1ubuntu2.24_amd64.deb
              ;;
            "ARM64")
              sudo apt-get install -y ./libssl1.1_1.1.1f-1ubuntu2.24_arm64.deb
              ;;
          esac
        fi

    - name: Cache PHP
      id: cache-php
      uses: actions/cache@v4
      with:
        path: php/target/
        key: php-${{ inputs.type == 'sanitize' && 'sanitizers' || (inputs.type == 'debug' && 'debug' || 'release') }}-${{ inputs.zts == 'zts' && 'zts' || 'nts' }}-${{ runner.arch }}-${{ steps.determine-php-version.outputs.version }}-${{ steps.determine-ubuntu-version.outputs.version }}-${{ hashFiles('**/.github/actions/install-php/**/*') }}

    - if: ${{ steps.cache-php.outputs.cache-hit != 'true' }}
      shell: bash
      run: mkdir php/

    - if: ${{ steps.cache-php.outputs.cache-hit != 'true' }}
      shell: bash
      run: sudo apt-get remove --purge --autoremove 'php*-*' 'libmemcached*'

    - if: ${{ steps.cache-php.outputs.cache-hit != 'true' }}
      shell: bash
      run: curl -fsSL "${{ steps.determine-php-version.outputs.archive }}" |tar xz -C php --strip-components=1
    
    - if: ${{ steps.cache-php.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        sudo apt-get install -y \
          libcurl4-openssl-dev \
          libmcrypt-dev \
          libmemcached-dev \
          libicu-dev \
          libonig-dev \
          librabbitmq-dev \
          librdkafka-dev \
          libsqlite3-dev \
          libssl-dev \
          libxml2-dev \
          libzip-dev \
          zlib1g-dev

        if dpkg --compare-versions "${{ steps.determine-php-version.outputs.version }}" lt 8.1.0; then
          case "${{ runner.arch}}" in
            "X64")
              sudo apt-get install -y --allow-downgrades ./libssl-dev_1.1.1f-1ubuntu2.24_amd64.deb
              ;;
            "ARM64")
              sudo apt-get install -y --allow-downgrades ./libssl-dev_1.1.1f-1ubuntu2.24_arm64.deb
              ;;
          esac
        fi

    - if: ${{ steps.cache-php.outputs.cache-hit != 'true' }}
      shell: bash
      working-directory: ./php/
      run: |
        if dpkg --compare-versions "${{ steps.determine-php-version.outputs.version }}" ge 8.0.0; then
          zts='--enable-zts'
        else
          zts='--enable-maintainer-zts'
        fi
        if dpkg --compare-versions "${{ steps.determine-php-version.outputs.version }}" ge 7.4.0; then
          zip='--with-zip'
        else
          zip='--enable-zip'
        fi

        ./configure \
          --enable-option-checking=fatal \
          --prefix=$(pwd)/target/ \
          --with-pear \
          ${{ (inputs.type == 'debug' || inputs.type == 'sanitize') && '--enable-debug' || '' }} \
          ${{ inputs.type == 'sanitize' && 'CFLAGS="-fsanitize=undefined,address -DZEND_TRACK_ARENA_ALLOC" LDFLAGS="-fsanitize=undefined,address" CC=clang-16 CXX=clang++-16' || '' }} \
          ${{ inputs.zts == 'zts' && '$zts' || '' }} \
          --enable-fpm \
          --enable-soap \
          --enable-mbstring \
          --with-curl \
          --with-mysqli \
          --with-openssl \
          --with-pdo-mysql \
          $zip \
          --with-zlib

    - if: ${{ steps.cache-php.outputs.cache-hit != 'true' }}
      shell: bash
      working-directory: ./php/
      run: |
        make -j$(getconf _NPROCESSORS_ONLN)

    - if: ${{ steps.cache-php.outputs.cache-hit != 'true' }}
      shell: bash
      working-directory: ./php/
      run: |
        make install

    - if: ${{ steps.cache-php.outputs.cache-hit != 'true' }}
      shell: bash
      working-directory: ./php/
      run: |
        gh release --repo php/pie download --pattern pie.phar
        gh attestation verify --repo php/pie pie.phar
        mv pie.phar $(pwd)/target/bin/pie
        chmod +x $(pwd)/target/bin/pie
      env:
        GH_TOKEN: ${{ github.token }}

    - if: ${{ steps.cache-php.outputs.cache-hit != 'true' }}
      shell: bash
      working-directory: ./php/
      run: |
        gh release --repo composer/composer download --pattern composer.phar
        gh attestation verify --repo composer/composer composer.phar
        mv composer.phar $(pwd)/target/bin/composer
        chmod +x $(pwd)/target/bin/composer
      env:
        GH_TOKEN: ${{ github.token }}
